Filip:
achievements_hlx.cpp 
activitylist.cpp 
ai_activity.cpp 
ai_activity.h 
ai_allymanager.cpp 
ai_basenpc.cpp 
ai_basenpc.h 
ai_basenpc_schedule.cpp 
ai_behavior_actbusy.cpp 
ai_behavior_fear.cpp 
ai_behavior_follow.cpp 
ai_behavior_lead.cpp 
ai_behavior_passenger.cpp 
ai_behavior_passenger.h 
ai_behavior_standoff.cpp 
ai_hint.cpp 
ai_moveprobe.cpp 
ai_planesolver.cpp 
ai_playerally.cpp 
ai_relationship.cpp 
ai_scriptconditions.cpp 
ai_scriptconditions.h 
ai_speech.cpp 
ai_utils.h 
antlion_maker.cpp 
baseanimating.h 
basecombatcharacter.cpp 
basecombatweapon_shared.cpp 
baseentity.cpp 
baseentity_shared.cpp 
baseflex.cpp 
basegrenade_shared.cpp 
baseplayer_shared.cpp 
baseviewmodel_shared.cpp 
baseviewmodel_shared.h 
baseviewport.cpp 
c_baseentity.cpp 
c_baseplayer.cpp 
c_baseplayer.h 
c_colorcorrection.cpp 
c_dynamiclight.cpp 
c_hl2mp_player.cpp 
c_hl2mp_player.h 
c_npc_advisor.cpp 
c_npc_antlionguard.cpp 
c_prop_scalable.cpp 
c_vehicle_airboat.cpp 
c_vehicle_jeep.cpp 
c_weapon_stunstick.cpp 
cdll_client_int.cpp 
classmenu.cpp 
client.cpp 
clientmode_shared.cpp 
colorcorrectionvolume.cpp 
combine_mine.cpp 
CommentarySystem.cpp 
effects.cpp 
EntityDissolve.cpp 
entitylist.cpp 
env_headcrabcanister.cpp 
env_zoom.cpp 
EnvHudHint.cpp 
EnvMessage.cpp 
ep2_gamestats.cpp 
func_break.cpp 
func_recharge.cpp 
func_tank.cpp 
func_tank.h 
fx_impact.cpp 
game.cpp 
gameinterface.cpp 
gameinterface.h 
gamemovement.cpp 
gamemovement.h 
gamerules.cpp 
gameweaponmanager.cpp 
geiger.cpp 
genericactor.cpp 
gib.cpp 
globals.cpp 
globals.h 
grenade_frag.cpp 
hl_gamemovement.cpp 
hl_gamemovement.h 
hl2_gamerules.cpp 
hl2_gamerules.h 
hl2_player.cpp 
hl2_usermessages.cpp 
hl2mp_client.cpp 
hl2mp_gamerules.cpp 
hl2mp_gamerules.h 
hl2mp_player.cpp 
hl2mp_player.h 
hl2mp_weapon_parse.cpp 
hl2mp_weapon_parse.h 
hud_ammo.cpp 
hud_basechat.cpp 
hud_battery.cpp 
hud_damageindicator.cpp 
hud_flashlight.cpp 
hud_health.cpp 
hud_locator.cpp 
hud_poisondamageindicator.cpp 
hud_posture.cpp 
hud_squadstatus.cpp 
hud_suitpower.cpp 
hud_zoom.cpp 

Junaid:
ilagcompensationmanager.h 
in_main.cpp 
item_battery.cpp 
item_dynamic_resupply.cpp 
item_suit.cpp 
iviewrender.h 
logicentities.cpp 
maprules.cpp 
message_entity.cpp 
monstermaker.cpp 
movevars_shared.cpp 
multiplay_gamerules.cpp 
multiplayer_animstate.cpp 
multiplayer_animstate.h 
npc_advisor.cpp 
npc_alyx_episodic.cpp 
npc_antlion.cpp 
npc_antlion.h 
npc_antlionguard.cpp 
npc_attackchopper.cpp 
npc_barnacle.cpp 
npc_barnacle.h 
npc_basescanner.cpp 
npc_BaseZombie.cpp 
npc_citizen17.cpp 
npc_citizen17.h 
npc_combine.cpp 
npc_combinedropship.cpp 
npc_combinegunship.cpp 
npc_combines.cpp 
npc_combines.h 
npc_dog.cpp 
npc_enemyfinder.cpp 
npc_headcrab.cpp 
npc_headcrab.h 
npc_metropolice.cpp 
npc_playercompanion.cpp 
npc_playercompanion.h 
npc_rollermine.cpp 
npc_scanner.cpp 
npc_strider.cpp 
npc_talker.cpp 
npc_turret.cpp 
npc_turret_floor.cpp 
npc_turret_floor.h 
npc_vortigaunt_episodic.cpp 
npc_zombine.cpp 
particlesystemquery.cpp 
physconstraint.cpp 
physics.cpp 
physics.h 
physics_npc_solver.cpp 
player.cpp 
player.h 
player_command.cpp 
player_lagcompensation.cpp 
player_pickup.cpp 
prop_combine_ball.cpp 
prop_thumper.cpp 
proto_sniper.cpp 
ragdoll_shared.cpp 
recipientfilter.cpp 
sceneentity.cpp 
script_intro.cpp 
shareddefs.h 
soundscape.cpp 
subs.cpp 
teamplayroundbased_gamerules.cpp 
test_stressentities.cpp 
trigger_portal.cpp 
triggers.cpp 
usercmd.cpp 
usercmd.h 
util.cpp 
util.h 
util_shared.cpp 
vehicle_airboat.cpp 
vehicle_crane.cpp 
vehicle_jeep.cpp 
vehicle_jeep.h 
vehicle_jeep_episodic.cpp 
vehicle_prisoner_pod.cpp 
vehicle_viewcontroller.cpp 
vguitextwindow.cpp 
view.cpp 
viewrender.h 
weapon_ar2.cpp 
weapon_ar2.h 
weapon_crossbow.cpp 
weapon_crowbar.cpp 
weapon_crowbar.h 
weapon_frag.cpp 
weapon_hl2mpbase.cpp 
weapon_hl2mpbase.h 
weapon_hl2mpbase_machinegun.h 
weapon_hl2mpbasebasebludgeon.h 
weapon_physcannon.cpp 
weapon_physcannon.h 
weapon_pistol.cpp 
weapon_rpg.cpp 
weapon_rpg.h 
weapon_selection.cpp 
weapon_shotgun.cpp 
weapon_slam.cpp 
weapon_smg1.cpp 
weapon_striderbuster.cpp 
weapon_stunstick.cpp

// Important Shit:
Vector vNearestPlayerPos = UTIL_GetNearestPlayer(ppAIs[i]->GetAbsOrigin())->GetAbsOrigin();
if ( !ppAIs[i]->IsInPlayerSquad() && !UTIL_FindClientInPVS( ppAIs[i]->edict() ) && ( ( ppAIs[i]->GetAbsOrigin() - vNearestPlayerPos ).LengthSqr() > 150*12 || fabsf( ppAIs[i]->GetAbsOrigin().z - vNearestPlayerPos.z ) > 192 ) )
{
}
// http://articles.thewavelength.net/682/
// http://articles.thewavelength.net/710/
// http://articles.thewavelength.net/680
// https://developer.valvesoftware.com/wiki/Creating_an_NPC (add the troll)
// https://developer.valvesoftware.com/wiki/VGUI_HTML_Screen_In_Orange_Box
// https://developer.valvesoftware.com/wiki/SDK_Known_Issues_List
// https://developer.valvesoftware.com/wiki/Duck_Jump_Fix
// https://developer.valvesoftware.com/wiki/Adding_an_experience_system
https://developer.valvesoftware.com/wiki/Authoring_a_Model_Entity
https://developer.valvesoftware.com/wiki/Particle_Muzzle_Flash
https://developer.valvesoftware.com/wiki/Rain_splashes (make particle)
implement some stuff from al.txt as default values
// Not so important shit XD:
// http://forums.steampowered.com/forums/showthread.php?t=3129924
// http://forums.steamgames.com/forums/showthread.php?t=1935224 ( https://developer.valvesoftware.com/wiki/Adding_an_inventory )
// https://developer.valvesoftware.com/wiki/Category:Particle_System
// https://developer.valvesoftware.com/wiki/Creating_a_Roundtimer
// https://developer.valvesoftware.com/wiki/Interactive_Ingame_VGUI_Panels<Fixing Screen Errors(not so important cuz it might be outdated, makes stuff broken)
// https://developer.valvesoftware.com/wiki/Resetting_the_Map
// https://developer.valvesoftware.com/wiki/Last_Man_Standing_Gametype
// https://developer.valvesoftware.com/wiki/Hud_AngleSplit
// https://developer.valvesoftware.com/wiki/CHudFadingObject
// https://developer.valvesoftware.com/wiki/CAreaPortalOneWay
// https://developer.valvesoftware.com/wiki/Multi_phys
// https://developer.valvesoftware.com/wiki/Manual_shotgun_pumping
// https://developer.valvesoftware.com/wiki/Make_an_NPC_move_somewhere
// http://forums.steampowered.com/forums/showthread.php?t=3196927
// http://forums.steampowered.com/forums/showthread.php?t=3025423
// https://developer.valvesoftware.com/wiki/Gibs
// https://developer.valvesoftware.com/wiki/Models_on_VGUI_Panels
// http://forums.steampowered.com/forums/showthread.php?t=3106997
DrawBeamQuadratic( points[0], points[1], points[2], 12, color, scrollOffset ); <Physgun Beam? :O
first comment out the client side beam code as it doesnt work.
and then in
Quote:
CWeaponGravityGun::EffectUpdate
add
Quote:
if ( distance > 39 )
{
CBaseEntity *pEnt = GetBeamEntity();
CBeam *pBeam = CBeam::BeamCreate( PHYSGUN_BEAM_SPRITE, 4 );
pBeam->PointEntInit( end, pEnt );
pBeam->SetEndAttachment( 1 );
pBeam->SetBrightness( 255 );

if (m_glueTouching)
{
//pBeam->SetColor( 255, 0, 0 );
}

pBeam->RelinkBeam();
pBeam->LiveForTime( 0.000001f );

}
Vector vecPlayerCenter = UTIL_GetLocalPlayer()->WorldSpaceCenter();
and looking at the jeep code and the leak source code it is nearly the same so this could of been done if you copy some jeep code and shove it in the weapon code this is just a cleaner version as it was coded by Valve also its only the physgun, hopwire, CGuard and some more that are still in the source code.
engine->GetClientSteamID(UTIL_GetCommandClient()->edict())->ConvertToUint64();
char botname[ 64 ];
	
	if(steamapicontext && steamapicontext->SteamFriends() || steamapicontext->SteamUtils() || g_pGameRules->IsMultiplayer())
	{
		CBaseMultiplayerPlayer *Me = static_cast<CBaseMultiplayerPlayer*>(UTIL_PlayerByIndex( 1 ));
		if(Me)
		{
			//CSteamID steamIDForPlayer;
			CSteamID steamID( Me->GetSteamIDAsUInt64(), 1, steamapicontext->SteamUtils()->GetConnectedUniverse(), k_EAccountTypeIndividual );
			Msg("%s: %i\n", UTIL_PlayerByIndex( 1 )->GetPlayerName(), Me->GetSteamIDAsUInt64());

			Q_strcpy(botname, steamapicontext->SteamFriends()->GetFriendPersonaName(steamapicontext->SteamFriends()->GetFriendFromSourceByIndex(steamID, 1)));
		}
	}
	if(!stricmp("",botname) || botname == NULL)
	{
		Q_snprintf( botname, sizeof( botname ), "Bot%02i", BotNumber );
	}

steamapicontext->SteamFriends()->GetFriendPersonaName(steamapicontext->SteamFriends()->GetFriendFromSourceByIndex(steamID, 1)));
// Optimize the materials with
//=>dx90_20b
//{
//HD shit and stuff that is targeted at matrix pc's lol
//}
//<dx90
//{
//Lower the quality to get performance xD
//}